// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/CPU-commits/Template_Go-EventDriven/src/auth/model"
	"github.com/CPU-commits/Template_Go-EventDriven/src/auth/repository/recovery_codes_repository"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRecoveryRepository creates a new instance of MockRecoveryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRecoveryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRecoveryRepository {
	mock := &MockRecoveryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRecoveryRepository is an autogenerated mock type for the RecoveryRepository type
type MockRecoveryRepository struct {
	mock.Mock
}

type MockRecoveryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRecoveryRepository) EXPECT() *MockRecoveryRepository_Expecter {
	return &MockRecoveryRepository_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function for the type MockRecoveryRepository
func (_mock *MockRecoveryRepository) Exists(criteria *recovery_codes_repository.RecoveryCriteria) (bool, error) {
	ret := _mock.Called(criteria)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*recovery_codes_repository.RecoveryCriteria) (bool, error)); ok {
		return returnFunc(criteria)
	}
	if returnFunc, ok := ret.Get(0).(func(*recovery_codes_repository.RecoveryCriteria) bool); ok {
		r0 = returnFunc(criteria)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(*recovery_codes_repository.RecoveryCriteria) error); ok {
		r1 = returnFunc(criteria)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRecoveryRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockRecoveryRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - criteria
func (_e *MockRecoveryRepository_Expecter) Exists(criteria interface{}) *MockRecoveryRepository_Exists_Call {
	return &MockRecoveryRepository_Exists_Call{Call: _e.mock.On("Exists", criteria)}
}

func (_c *MockRecoveryRepository_Exists_Call) Run(run func(criteria *recovery_codes_repository.RecoveryCriteria)) *MockRecoveryRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*recovery_codes_repository.RecoveryCriteria))
	})
	return _c
}

func (_c *MockRecoveryRepository_Exists_Call) Return(b bool, err error) *MockRecoveryRepository_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRecoveryRepository_Exists_Call) RunAndReturn(run func(criteria *recovery_codes_repository.RecoveryCriteria) (bool, error)) *MockRecoveryRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function for the type MockRecoveryRepository
func (_mock *MockRecoveryRepository) Find(criteria *recovery_codes_repository.RecoveryCriteria) ([]model.Recovery, error) {
	ret := _mock.Called(criteria)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 []model.Recovery
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*recovery_codes_repository.RecoveryCriteria) ([]model.Recovery, error)); ok {
		return returnFunc(criteria)
	}
	if returnFunc, ok := ret.Get(0).(func(*recovery_codes_repository.RecoveryCriteria) []model.Recovery); ok {
		r0 = returnFunc(criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Recovery)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*recovery_codes_repository.RecoveryCriteria) error); ok {
		r1 = returnFunc(criteria)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRecoveryRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockRecoveryRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - criteria
func (_e *MockRecoveryRepository_Expecter) Find(criteria interface{}) *MockRecoveryRepository_Find_Call {
	return &MockRecoveryRepository_Find_Call{Call: _e.mock.On("Find", criteria)}
}

func (_c *MockRecoveryRepository_Find_Call) Run(run func(criteria *recovery_codes_repository.RecoveryCriteria)) *MockRecoveryRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*recovery_codes_repository.RecoveryCriteria))
	})
	return _c
}

func (_c *MockRecoveryRepository_Find_Call) Return(recoverys []model.Recovery, err error) *MockRecoveryRepository_Find_Call {
	_c.Call.Return(recoverys, err)
	return _c
}

func (_c *MockRecoveryRepository_Find_Call) RunAndReturn(run func(criteria *recovery_codes_repository.RecoveryCriteria) ([]model.Recovery, error)) *MockRecoveryRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function for the type MockRecoveryRepository
func (_mock *MockRecoveryRepository) FindOne(criteria *recovery_codes_repository.RecoveryCriteria) (*model.Recovery, error) {
	ret := _mock.Called(criteria)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *model.Recovery
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*recovery_codes_repository.RecoveryCriteria) (*model.Recovery, error)); ok {
		return returnFunc(criteria)
	}
	if returnFunc, ok := ret.Get(0).(func(*recovery_codes_repository.RecoveryCriteria) *model.Recovery); ok {
		r0 = returnFunc(criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Recovery)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*recovery_codes_repository.RecoveryCriteria) error); ok {
		r1 = returnFunc(criteria)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRecoveryRepository_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockRecoveryRepository_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - criteria
func (_e *MockRecoveryRepository_Expecter) FindOne(criteria interface{}) *MockRecoveryRepository_FindOne_Call {
	return &MockRecoveryRepository_FindOne_Call{Call: _e.mock.On("FindOne", criteria)}
}

func (_c *MockRecoveryRepository_FindOne_Call) Run(run func(criteria *recovery_codes_repository.RecoveryCriteria)) *MockRecoveryRepository_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*recovery_codes_repository.RecoveryCriteria))
	})
	return _c
}

func (_c *MockRecoveryRepository_FindOne_Call) Return(recovery *model.Recovery, err error) *MockRecoveryRepository_FindOne_Call {
	_c.Call.Return(recovery, err)
	return _c
}

func (_c *MockRecoveryRepository_FindOne_Call) RunAndReturn(run func(criteria *recovery_codes_repository.RecoveryCriteria) (*model.Recovery, error)) *MockRecoveryRepository_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOne provides a mock function for the type MockRecoveryRepository
func (_mock *MockRecoveryRepository) InsertOne(recovery model.Recovery) (*model.Recovery, error) {
	ret := _mock.Called(recovery)

	if len(ret) == 0 {
		panic("no return value specified for InsertOne")
	}

	var r0 *model.Recovery
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(model.Recovery) (*model.Recovery, error)); ok {
		return returnFunc(recovery)
	}
	if returnFunc, ok := ret.Get(0).(func(model.Recovery) *model.Recovery); ok {
		r0 = returnFunc(recovery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Recovery)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(model.Recovery) error); ok {
		r1 = returnFunc(recovery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRecoveryRepository_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type MockRecoveryRepository_InsertOne_Call struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - recovery
func (_e *MockRecoveryRepository_Expecter) InsertOne(recovery interface{}) *MockRecoveryRepository_InsertOne_Call {
	return &MockRecoveryRepository_InsertOne_Call{Call: _e.mock.On("InsertOne", recovery)}
}

func (_c *MockRecoveryRepository_InsertOne_Call) Run(run func(recovery model.Recovery)) *MockRecoveryRepository_InsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Recovery))
	})
	return _c
}

func (_c *MockRecoveryRepository_InsertOne_Call) Return(recovery1 *model.Recovery, err error) *MockRecoveryRepository_InsertOne_Call {
	_c.Call.Return(recovery1, err)
	return _c
}

func (_c *MockRecoveryRepository_InsertOne_Call) RunAndReturn(run func(recovery model.Recovery) (*model.Recovery, error)) *MockRecoveryRepository_InsertOne_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function for the type MockRecoveryRepository
func (_mock *MockRecoveryRepository) UpdateOne(id int64, data recovery_codes_repository.RecoveryDataUpdate) error {
	ret := _mock.Called(id, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64, recovery_codes_repository.RecoveryDataUpdate) error); ok {
		r0 = returnFunc(id, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRecoveryRepository_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type MockRecoveryRepository_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - id
//   - data
func (_e *MockRecoveryRepository_Expecter) UpdateOne(id interface{}, data interface{}) *MockRecoveryRepository_UpdateOne_Call {
	return &MockRecoveryRepository_UpdateOne_Call{Call: _e.mock.On("UpdateOne", id, data)}
}

func (_c *MockRecoveryRepository_UpdateOne_Call) Run(run func(id int64, data recovery_codes_repository.RecoveryDataUpdate)) *MockRecoveryRepository_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(recovery_codes_repository.RecoveryDataUpdate))
	})
	return _c
}

func (_c *MockRecoveryRepository_UpdateOne_Call) Return(err error) *MockRecoveryRepository_UpdateOne_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRecoveryRepository_UpdateOne_Call) RunAndReturn(run func(id int64, data recovery_codes_repository.RecoveryDataUpdate) error) *MockRecoveryRepository_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}
