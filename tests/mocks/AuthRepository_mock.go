// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/CPU-commits/Template_Go-EventDriven/src/auth/model"
	"github.com/CPU-commits/Template_Go-EventDriven/src/auth/repository/auth_repository"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthRepository creates a new instance of MockAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepository {
	mock := &MockAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthRepository is an autogenerated mock type for the AuthRepository type
type MockAuthRepository struct {
	mock.Mock
}

type MockAuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepository) EXPECT() *MockAuthRepository_Expecter {
	return &MockAuthRepository_Expecter{mock: &_m.Mock}
}

// FindOneByUsername provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) FindOneByUsername(username string) (*model.Auth, error) {
	ret := _mock.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for FindOneByUsername")
	}

	var r0 *model.Auth
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*model.Auth, error)); ok {
		return returnFunc(username)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.Auth); ok {
		r0 = returnFunc(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Auth)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthRepository_FindOneByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneByUsername'
type MockAuthRepository_FindOneByUsername_Call struct {
	*mock.Call
}

// FindOneByUsername is a helper method to define mock.On call
//   - username
func (_e *MockAuthRepository_Expecter) FindOneByUsername(username interface{}) *MockAuthRepository_FindOneByUsername_Call {
	return &MockAuthRepository_FindOneByUsername_Call{Call: _e.mock.On("FindOneByUsername", username)}
}

func (_c *MockAuthRepository_FindOneByUsername_Call) Run(run func(username string)) *MockAuthRepository_FindOneByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthRepository_FindOneByUsername_Call) Return(auth *model.Auth, err error) *MockAuthRepository_FindOneByUsername_Call {
	_c.Call.Return(auth, err)
	return _c
}

func (_c *MockAuthRepository_FindOneByUsername_Call) RunAndReturn(run func(username string) (*model.Auth, error)) *MockAuthRepository_FindOneByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function for the type MockAuthRepository
func (_mock *MockAuthRepository) UpdateOne(id int64, dataUpdate *auth_repository.AuthDataUpdate) error {
	ret := _mock.Called(id, dataUpdate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64, *auth_repository.AuthDataUpdate) error); ok {
		r0 = returnFunc(id, dataUpdate)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthRepository_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type MockAuthRepository_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - id
//   - dataUpdate
func (_e *MockAuthRepository_Expecter) UpdateOne(id interface{}, dataUpdate interface{}) *MockAuthRepository_UpdateOne_Call {
	return &MockAuthRepository_UpdateOne_Call{Call: _e.mock.On("UpdateOne", id, dataUpdate)}
}

func (_c *MockAuthRepository_UpdateOne_Call) Run(run func(id int64, dataUpdate *auth_repository.AuthDataUpdate)) *MockAuthRepository_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(*auth_repository.AuthDataUpdate))
	})
	return _c
}

func (_c *MockAuthRepository_UpdateOne_Call) Return(err error) *MockAuthRepository_UpdateOne_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthRepository_UpdateOne_Call) RunAndReturn(run func(id int64, dataUpdate *auth_repository.AuthDataUpdate) error) *MockAuthRepository_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}
