// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/CPU-commits/Template_Go-EventDriven/src/auth/model"
	"github.com/CPU-commits/Template_Go-EventDriven/src/auth/repository/access_repository"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAccessRepository creates a new instance of MockAccessRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccessRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccessRepository {
	mock := &MockAccessRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAccessRepository is an autogenerated mock type for the AccessRepository type
type MockAccessRepository struct {
	mock.Mock
}

type MockAccessRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccessRepository) EXPECT() *MockAccessRepository_Expecter {
	return &MockAccessRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockAccessRepository
func (_mock *MockAccessRepository) Delete(criteria *access_repository.AccessCriteria) error {
	ret := _mock.Called(criteria)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*access_repository.AccessCriteria) error); ok {
		r0 = returnFunc(criteria)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAccessRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAccessRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - criteria
func (_e *MockAccessRepository_Expecter) Delete(criteria interface{}) *MockAccessRepository_Delete_Call {
	return &MockAccessRepository_Delete_Call{Call: _e.mock.On("Delete", criteria)}
}

func (_c *MockAccessRepository_Delete_Call) Run(run func(criteria *access_repository.AccessCriteria)) *MockAccessRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*access_repository.AccessCriteria))
	})
	return _c
}

func (_c *MockAccessRepository_Delete_Call) Return(err error) *MockAccessRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccessRepository_Delete_Call) RunAndReturn(run func(criteria *access_repository.AccessCriteria) error) *MockAccessRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockAccessRepository
func (_mock *MockAccessRepository) Exists(criteria *access_repository.AccessCriteria) (int64, error) {
	ret := _mock.Called(criteria)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*access_repository.AccessCriteria) (int64, error)); ok {
		return returnFunc(criteria)
	}
	if returnFunc, ok := ret.Get(0).(func(*access_repository.AccessCriteria) int64); ok {
		r0 = returnFunc(criteria)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(*access_repository.AccessCriteria) error); ok {
		r1 = returnFunc(criteria)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccessRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockAccessRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - criteria
func (_e *MockAccessRepository_Expecter) Exists(criteria interface{}) *MockAccessRepository_Exists_Call {
	return &MockAccessRepository_Exists_Call{Call: _e.mock.On("Exists", criteria)}
}

func (_c *MockAccessRepository_Exists_Call) Run(run func(criteria *access_repository.AccessCriteria)) *MockAccessRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*access_repository.AccessCriteria))
	})
	return _c
}

func (_c *MockAccessRepository_Exists_Call) Return(id int64, err error) *MockAccessRepository_Exists_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *MockAccessRepository_Exists_Call) RunAndReturn(run func(criteria *access_repository.AccessCriteria) (int64, error)) *MockAccessRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOne provides a mock function for the type MockAccessRepository
func (_mock *MockAccessRepository) InsertOne(access model.Access) (int64, error) {
	ret := _mock.Called(access)

	if len(ret) == 0 {
		panic("no return value specified for InsertOne")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(model.Access) (int64, error)); ok {
		return returnFunc(access)
	}
	if returnFunc, ok := ret.Get(0).(func(model.Access) int64); ok {
		r0 = returnFunc(access)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(model.Access) error); ok {
		r1 = returnFunc(access)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccessRepository_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type MockAccessRepository_InsertOne_Call struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - access
func (_e *MockAccessRepository_Expecter) InsertOne(access interface{}) *MockAccessRepository_InsertOne_Call {
	return &MockAccessRepository_InsertOne_Call{Call: _e.mock.On("InsertOne", access)}
}

func (_c *MockAccessRepository_InsertOne_Call) Run(run func(access model.Access)) *MockAccessRepository_InsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Access))
	})
	return _c
}

func (_c *MockAccessRepository_InsertOne_Call) Return(id int64, err error) *MockAccessRepository_InsertOne_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *MockAccessRepository_InsertOne_Call) RunAndReturn(run func(access model.Access) (int64, error)) *MockAccessRepository_InsertOne_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockAccessRepository
func (_mock *MockAccessRepository) Update(criteria *access_repository.AccessCriteria, data access_repository.AccessUpdateData) error {
	ret := _mock.Called(criteria, data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*access_repository.AccessCriteria, access_repository.AccessUpdateData) error); ok {
		r0 = returnFunc(criteria, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAccessRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAccessRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - criteria
//   - data
func (_e *MockAccessRepository_Expecter) Update(criteria interface{}, data interface{}) *MockAccessRepository_Update_Call {
	return &MockAccessRepository_Update_Call{Call: _e.mock.On("Update", criteria, data)}
}

func (_c *MockAccessRepository_Update_Call) Run(run func(criteria *access_repository.AccessCriteria, data access_repository.AccessUpdateData)) *MockAccessRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*access_repository.AccessCriteria), args[1].(access_repository.AccessUpdateData))
	})
	return _c
}

func (_c *MockAccessRepository_Update_Call) Return(err error) *MockAccessRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccessRepository_Update_Call) RunAndReturn(run func(criteria *access_repository.AccessCriteria, data access_repository.AccessUpdateData) error) *MockAccessRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
