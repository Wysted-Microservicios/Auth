// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/CPU-commits/Template_Go-EventDriven/src/auth/model"
	"github.com/CPU-commits/Template_Go-EventDriven/src/auth/repository/user_repository"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) Exists(criteria *user_repository.Criteria) (bool, error) {
	ret := _mock.Called(criteria)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*user_repository.Criteria) (bool, error)); ok {
		return returnFunc(criteria)
	}
	if returnFunc, ok := ret.Get(0).(func(*user_repository.Criteria) bool); ok {
		r0 = returnFunc(criteria)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(*user_repository.Criteria) error); ok {
		r1 = returnFunc(criteria)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockUserRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - criteria
func (_e *MockUserRepository_Expecter) Exists(criteria interface{}) *MockUserRepository_Exists_Call {
	return &MockUserRepository_Exists_Call{Call: _e.mock.On("Exists", criteria)}
}

func (_c *MockUserRepository_Exists_Call) Run(run func(criteria *user_repository.Criteria)) *MockUserRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*user_repository.Criteria))
	})
	return _c
}

func (_c *MockUserRepository_Exists_Call) Return(b bool, err error) *MockUserRepository_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockUserRepository_Exists_Call) RunAndReturn(run func(criteria *user_repository.Criteria) (bool, error)) *MockUserRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) FindOne(criteria *user_repository.Criteria, opts *user_repository.FindOneOptions) (*model.User, error) {
	ret := _mock.Called(criteria, opts)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*user_repository.Criteria, *user_repository.FindOneOptions) (*model.User, error)); ok {
		return returnFunc(criteria, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(*user_repository.Criteria, *user_repository.FindOneOptions) *model.User); ok {
		r0 = returnFunc(criteria, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*user_repository.Criteria, *user_repository.FindOneOptions) error); ok {
		r1 = returnFunc(criteria, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockUserRepository_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - criteria
//   - opts
func (_e *MockUserRepository_Expecter) FindOne(criteria interface{}, opts interface{}) *MockUserRepository_FindOne_Call {
	return &MockUserRepository_FindOne_Call{Call: _e.mock.On("FindOne", criteria, opts)}
}

func (_c *MockUserRepository_FindOne_Call) Run(run func(criteria *user_repository.Criteria, opts *user_repository.FindOneOptions)) *MockUserRepository_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*user_repository.Criteria), args[1].(*user_repository.FindOneOptions))
	})
	return _c
}

func (_c *MockUserRepository_FindOne_Call) Return(user *model.User, err error) *MockUserRepository_FindOne_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_FindOne_Call) RunAndReturn(run func(criteria *user_repository.Criteria, opts *user_repository.FindOneOptions) (*model.User, error)) *MockUserRepository_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// FindOneByEmail provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) FindOneByEmail(email string) (*model.User, error) {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindOneByEmail")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*model.User, error)); ok {
		return returnFunc(email)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = returnFunc(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_FindOneByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneByEmail'
type MockUserRepository_FindOneByEmail_Call struct {
	*mock.Call
}

// FindOneByEmail is a helper method to define mock.On call
//   - email
func (_e *MockUserRepository_Expecter) FindOneByEmail(email interface{}) *MockUserRepository_FindOneByEmail_Call {
	return &MockUserRepository_FindOneByEmail_Call{Call: _e.mock.On("FindOneByEmail", email)}
}

func (_c *MockUserRepository_FindOneByEmail_Call) Run(run func(email string)) *MockUserRepository_FindOneByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserRepository_FindOneByEmail_Call) Return(user *model.User, err error) *MockUserRepository_FindOneByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_FindOneByEmail_Call) RunAndReturn(run func(email string) (*model.User, error)) *MockUserRepository_FindOneByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindOneByID provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) FindOneByID(id int64) (*model.User, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindOneByID")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64) (*model.User, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int64) *model.User); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int64) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_FindOneByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneByID'
type MockUserRepository_FindOneByID_Call struct {
	*mock.Call
}

// FindOneByID is a helper method to define mock.On call
//   - id
func (_e *MockUserRepository_Expecter) FindOneByID(id interface{}) *MockUserRepository_FindOneByID_Call {
	return &MockUserRepository_FindOneByID_Call{Call: _e.mock.On("FindOneByID", id)}
}

func (_c *MockUserRepository_FindOneByID_Call) Run(run func(id int64)) *MockUserRepository_FindOneByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockUserRepository_FindOneByID_Call) Return(user *model.User, err error) *MockUserRepository_FindOneByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_FindOneByID_Call) RunAndReturn(run func(id int64) (*model.User, error)) *MockUserRepository_FindOneByID_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOne provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) InsertOne(user *model.User, password string) (*model.User, error) {
	ret := _mock.Called(user, password)

	if len(ret) == 0 {
		panic("no return value specified for InsertOne")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*model.User, string) (*model.User, error)); ok {
		return returnFunc(user, password)
	}
	if returnFunc, ok := ret.Get(0).(func(*model.User, string) *model.User); ok {
		r0 = returnFunc(user, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*model.User, string) error); ok {
		r1 = returnFunc(user, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type MockUserRepository_InsertOne_Call struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - user
//   - password
func (_e *MockUserRepository_Expecter) InsertOne(user interface{}, password interface{}) *MockUserRepository_InsertOne_Call {
	return &MockUserRepository_InsertOne_Call{Call: _e.mock.On("InsertOne", user, password)}
}

func (_c *MockUserRepository_InsertOne_Call) Run(run func(user *model.User, password string)) *MockUserRepository_InsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.User), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_InsertOne_Call) Return(user1 *model.User, err error) *MockUserRepository_InsertOne_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockUserRepository_InsertOne_Call) RunAndReturn(run func(user *model.User, password string) (*model.User, error)) *MockUserRepository_InsertOne_Call {
	_c.Call.Return(run)
	return _c
}
