// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	"github.com/CPU-commits/Template_Go-EventDriven/src/auth/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTokenGenerator creates a new instance of MockTokenGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenGenerator {
	mock := &MockTokenGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTokenGenerator is an autogenerated mock type for the TokenGenerator type
type MockTokenGenerator struct {
	mock.Mock
}

type MockTokenGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenGenerator) EXPECT() *MockTokenGenerator_Expecter {
	return &MockTokenGenerator_Expecter{mock: &_m.Mock}
}

// NewAccessToken provides a mock function for the type MockTokenGenerator
func (_mock *MockTokenGenerator) NewAccessToken(expiredAt time.Time, user model.User) (string, error) {
	ret := _mock.Called(expiredAt, user)

	if len(ret) == 0 {
		panic("no return value specified for NewAccessToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(time.Time, model.User) (string, error)); ok {
		return returnFunc(expiredAt, user)
	}
	if returnFunc, ok := ret.Get(0).(func(time.Time, model.User) string); ok {
		r0 = returnFunc(expiredAt, user)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(time.Time, model.User) error); ok {
		r1 = returnFunc(expiredAt, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTokenGenerator_NewAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewAccessToken'
type MockTokenGenerator_NewAccessToken_Call struct {
	*mock.Call
}

// NewAccessToken is a helper method to define mock.On call
//   - expiredAt
//   - user
func (_e *MockTokenGenerator_Expecter) NewAccessToken(expiredAt interface{}, user interface{}) *MockTokenGenerator_NewAccessToken_Call {
	return &MockTokenGenerator_NewAccessToken_Call{Call: _e.mock.On("NewAccessToken", expiredAt, user)}
}

func (_c *MockTokenGenerator_NewAccessToken_Call) Run(run func(expiredAt time.Time, user model.User)) *MockTokenGenerator_NewAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(model.User))
	})
	return _c
}

func (_c *MockTokenGenerator_NewAccessToken_Call) Return(s string, err error) *MockTokenGenerator_NewAccessToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTokenGenerator_NewAccessToken_Call) RunAndReturn(run func(expiredAt time.Time, user model.User) (string, error)) *MockTokenGenerator_NewAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewFirstTimeToken provides a mock function for the type MockTokenGenerator
func (_mock *MockTokenGenerator) NewFirstTimeToken(IDUser int64) (string, error) {
	ret := _mock.Called(IDUser)

	if len(ret) == 0 {
		panic("no return value specified for NewFirstTimeToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64) (string, error)); ok {
		return returnFunc(IDUser)
	}
	if returnFunc, ok := ret.Get(0).(func(int64) string); ok {
		r0 = returnFunc(IDUser)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(int64) error); ok {
		r1 = returnFunc(IDUser)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTokenGenerator_NewFirstTimeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewFirstTimeToken'
type MockTokenGenerator_NewFirstTimeToken_Call struct {
	*mock.Call
}

// NewFirstTimeToken is a helper method to define mock.On call
//   - IDUser
func (_e *MockTokenGenerator_Expecter) NewFirstTimeToken(IDUser interface{}) *MockTokenGenerator_NewFirstTimeToken_Call {
	return &MockTokenGenerator_NewFirstTimeToken_Call{Call: _e.mock.On("NewFirstTimeToken", IDUser)}
}

func (_c *MockTokenGenerator_NewFirstTimeToken_Call) Run(run func(IDUser int64)) *MockTokenGenerator_NewFirstTimeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockTokenGenerator_NewFirstTimeToken_Call) Return(s string, err error) *MockTokenGenerator_NewFirstTimeToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTokenGenerator_NewFirstTimeToken_Call) RunAndReturn(run func(IDUser int64) (string, error)) *MockTokenGenerator_NewFirstTimeToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewRecoveryCodeToken provides a mock function for the type MockTokenGenerator
func (_mock *MockTokenGenerator) NewRecoveryCodeToken(expireddAt time.Time, user model.User) (string, error) {
	ret := _mock.Called(expireddAt, user)

	if len(ret) == 0 {
		panic("no return value specified for NewRecoveryCodeToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(time.Time, model.User) (string, error)); ok {
		return returnFunc(expireddAt, user)
	}
	if returnFunc, ok := ret.Get(0).(func(time.Time, model.User) string); ok {
		r0 = returnFunc(expireddAt, user)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(time.Time, model.User) error); ok {
		r1 = returnFunc(expireddAt, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTokenGenerator_NewRecoveryCodeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewRecoveryCodeToken'
type MockTokenGenerator_NewRecoveryCodeToken_Call struct {
	*mock.Call
}

// NewRecoveryCodeToken is a helper method to define mock.On call
//   - expireddAt
//   - user
func (_e *MockTokenGenerator_Expecter) NewRecoveryCodeToken(expireddAt interface{}, user interface{}) *MockTokenGenerator_NewRecoveryCodeToken_Call {
	return &MockTokenGenerator_NewRecoveryCodeToken_Call{Call: _e.mock.On("NewRecoveryCodeToken", expireddAt, user)}
}

func (_c *MockTokenGenerator_NewRecoveryCodeToken_Call) Run(run func(expireddAt time.Time, user model.User)) *MockTokenGenerator_NewRecoveryCodeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(model.User))
	})
	return _c
}

func (_c *MockTokenGenerator_NewRecoveryCodeToken_Call) Return(s string, err error) *MockTokenGenerator_NewRecoveryCodeToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTokenGenerator_NewRecoveryCodeToken_Call) RunAndReturn(run func(expireddAt time.Time, user model.User) (string, error)) *MockTokenGenerator_NewRecoveryCodeToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionToken provides a mock function for the type MockTokenGenerator
func (_mock *MockTokenGenerator) NewSessionToken(expiredAt time.Time, idUser int64) (string, error) {
	ret := _mock.Called(expiredAt, idUser)

	if len(ret) == 0 {
		panic("no return value specified for NewSessionToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(time.Time, int64) (string, error)); ok {
		return returnFunc(expiredAt, idUser)
	}
	if returnFunc, ok := ret.Get(0).(func(time.Time, int64) string); ok {
		r0 = returnFunc(expiredAt, idUser)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(time.Time, int64) error); ok {
		r1 = returnFunc(expiredAt, idUser)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTokenGenerator_NewSessionToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewSessionToken'
type MockTokenGenerator_NewSessionToken_Call struct {
	*mock.Call
}

// NewSessionToken is a helper method to define mock.On call
//   - expiredAt
//   - idUser
func (_e *MockTokenGenerator_Expecter) NewSessionToken(expiredAt interface{}, idUser interface{}) *MockTokenGenerator_NewSessionToken_Call {
	return &MockTokenGenerator_NewSessionToken_Call{Call: _e.mock.On("NewSessionToken", expiredAt, idUser)}
}

func (_c *MockTokenGenerator_NewSessionToken_Call) Run(run func(expiredAt time.Time, idUser int64)) *MockTokenGenerator_NewSessionToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(int64))
	})
	return _c
}

func (_c *MockTokenGenerator_NewSessionToken_Call) Return(s string, err error) *MockTokenGenerator_NewSessionToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTokenGenerator_NewSessionToken_Call) RunAndReturn(run func(expiredAt time.Time, idUser int64) (string, error)) *MockTokenGenerator_NewSessionToken_Call {
	_c.Call.Return(run)
	return _c
}
