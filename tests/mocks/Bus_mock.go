// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/CPU-commits/Template_Go-EventDriven/src/package/bus"
	mock "github.com/stretchr/testify/mock"
)

// NewMockBus creates a new instance of MockBus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBus(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBus {
	mock := &MockBus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBus is an autogenerated mock type for the Bus type
type MockBus struct {
	mock.Mock
}

type MockBus_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBus) EXPECT() *MockBus_Expecter {
	return &MockBus_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function for the type MockBus
func (_mock *MockBus) Publish(event bus.Event) error {
	ret := _mock.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(bus.Event) error); ok {
		r0 = returnFunc(event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBus_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockBus_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - event
func (_e *MockBus_Expecter) Publish(event interface{}) *MockBus_Publish_Call {
	return &MockBus_Publish_Call{Call: _e.mock.On("Publish", event)}
}

func (_c *MockBus_Publish_Call) Run(run func(event bus.Event)) *MockBus_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bus.Event))
	})
	return _c
}

func (_c *MockBus_Publish_Call) Return(err error) *MockBus_Publish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBus_Publish_Call) RunAndReturn(run func(event bus.Event) error) *MockBus_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function for the type MockBus
func (_mock *MockBus) Request(name bus.Event, toBind interface{}) error {
	ret := _mock.Called(name, toBind)

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(bus.Event, interface{}) error); ok {
		r0 = returnFunc(name, toBind)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBus_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type MockBus_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - name
//   - toBind
func (_e *MockBus_Expecter) Request(name interface{}, toBind interface{}) *MockBus_Request_Call {
	return &MockBus_Request_Call{Call: _e.mock.On("Request", name, toBind)}
}

func (_c *MockBus_Request_Call) Run(run func(name bus.Event, toBind interface{})) *MockBus_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bus.Event), args[1].(interface{}))
	})
	return _c
}

func (_c *MockBus_Request_Call) Return(err error) *MockBus_Request_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBus_Request_Call) RunAndReturn(run func(name bus.Event, toBind interface{}) error) *MockBus_Request_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type MockBus
func (_mock *MockBus) Subscribe(name bus.EventName, handler func(c bus.Context) error) {
	_mock.Called(name, handler)
	return
}

// MockBus_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockBus_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - name
//   - handler
func (_e *MockBus_Expecter) Subscribe(name interface{}, handler interface{}) *MockBus_Subscribe_Call {
	return &MockBus_Subscribe_Call{Call: _e.mock.On("Subscribe", name, handler)}
}

func (_c *MockBus_Subscribe_Call) Run(run func(name bus.EventName, handler func(c bus.Context) error)) *MockBus_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bus.EventName), args[1].(func(c bus.Context) error))
	})
	return _c
}

func (_c *MockBus_Subscribe_Call) Return() *MockBus_Subscribe_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBus_Subscribe_Call) RunAndReturn(run func(name bus.EventName, handler func(c bus.Context) error)) *MockBus_Subscribe_Call {
	_c.Run(run)
	return _c
}

// SubscribeAndRespond provides a mock function for the type MockBus
func (_mock *MockBus) SubscribeAndRespond(name bus.EventName, handler func(c bus.Context) (*bus.BusResponse, error)) {
	_mock.Called(name, handler)
	return
}

// MockBus_SubscribeAndRespond_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeAndRespond'
type MockBus_SubscribeAndRespond_Call struct {
	*mock.Call
}

// SubscribeAndRespond is a helper method to define mock.On call
//   - name
//   - handler
func (_e *MockBus_Expecter) SubscribeAndRespond(name interface{}, handler interface{}) *MockBus_SubscribeAndRespond_Call {
	return &MockBus_SubscribeAndRespond_Call{Call: _e.mock.On("SubscribeAndRespond", name, handler)}
}

func (_c *MockBus_SubscribeAndRespond_Call) Run(run func(name bus.EventName, handler func(c bus.Context) (*bus.BusResponse, error))) *MockBus_SubscribeAndRespond_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bus.EventName), args[1].(func(c bus.Context) (*bus.BusResponse, error)))
	})
	return _c
}

func (_c *MockBus_SubscribeAndRespond_Call) Return() *MockBus_SubscribeAndRespond_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBus_SubscribeAndRespond_Call) RunAndReturn(run func(name bus.EventName, handler func(c bus.Context) (*bus.BusResponse, error))) *MockBus_SubscribeAndRespond_Call {
	_c.Run(run)
	return _c
}
