// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRecoveryTokens(t *testing.T) {
	t.Parallel()

	query := RecoveryTokens()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRecoveryTokensDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecoveryToken{}
	if err = randomize.Struct(seed, o, recoveryTokenDBTypes, true, recoveryTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecoveryTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecoveryTokensQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecoveryToken{}
	if err = randomize.Struct(seed, o, recoveryTokenDBTypes, true, recoveryTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RecoveryTokens().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecoveryTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecoveryTokensSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecoveryToken{}
	if err = randomize.Struct(seed, o, recoveryTokenDBTypes, true, recoveryTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecoveryTokenSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecoveryTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecoveryTokensExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecoveryToken{}
	if err = randomize.Struct(seed, o, recoveryTokenDBTypes, true, recoveryTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RecoveryTokenExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RecoveryToken exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RecoveryTokenExists to return true, but got false.")
	}
}

func testRecoveryTokensFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecoveryToken{}
	if err = randomize.Struct(seed, o, recoveryTokenDBTypes, true, recoveryTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	recoveryTokenFound, err := FindRecoveryToken(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if recoveryTokenFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRecoveryTokensBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecoveryToken{}
	if err = randomize.Struct(seed, o, recoveryTokenDBTypes, true, recoveryTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RecoveryTokens().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRecoveryTokensOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecoveryToken{}
	if err = randomize.Struct(seed, o, recoveryTokenDBTypes, true, recoveryTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RecoveryTokens().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRecoveryTokensAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	recoveryTokenOne := &RecoveryToken{}
	recoveryTokenTwo := &RecoveryToken{}
	if err = randomize.Struct(seed, recoveryTokenOne, recoveryTokenDBTypes, false, recoveryTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}
	if err = randomize.Struct(seed, recoveryTokenTwo, recoveryTokenDBTypes, false, recoveryTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recoveryTokenOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recoveryTokenTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecoveryTokens().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRecoveryTokensCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	recoveryTokenOne := &RecoveryToken{}
	recoveryTokenTwo := &RecoveryToken{}
	if err = randomize.Struct(seed, recoveryTokenOne, recoveryTokenDBTypes, false, recoveryTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}
	if err = randomize.Struct(seed, recoveryTokenTwo, recoveryTokenDBTypes, false, recoveryTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recoveryTokenOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recoveryTokenTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecoveryTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func recoveryTokenBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecoveryToken) error {
	*o = RecoveryToken{}
	return nil
}

func recoveryTokenAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecoveryToken) error {
	*o = RecoveryToken{}
	return nil
}

func recoveryTokenAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RecoveryToken) error {
	*o = RecoveryToken{}
	return nil
}

func recoveryTokenBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecoveryToken) error {
	*o = RecoveryToken{}
	return nil
}

func recoveryTokenAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecoveryToken) error {
	*o = RecoveryToken{}
	return nil
}

func recoveryTokenBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecoveryToken) error {
	*o = RecoveryToken{}
	return nil
}

func recoveryTokenAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecoveryToken) error {
	*o = RecoveryToken{}
	return nil
}

func recoveryTokenBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecoveryToken) error {
	*o = RecoveryToken{}
	return nil
}

func recoveryTokenAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecoveryToken) error {
	*o = RecoveryToken{}
	return nil
}

func testRecoveryTokensHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RecoveryToken{}
	o := &RecoveryToken{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, recoveryTokenDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RecoveryToken object: %s", err)
	}

	AddRecoveryTokenHook(boil.BeforeInsertHook, recoveryTokenBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	recoveryTokenBeforeInsertHooks = []RecoveryTokenHook{}

	AddRecoveryTokenHook(boil.AfterInsertHook, recoveryTokenAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	recoveryTokenAfterInsertHooks = []RecoveryTokenHook{}

	AddRecoveryTokenHook(boil.AfterSelectHook, recoveryTokenAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	recoveryTokenAfterSelectHooks = []RecoveryTokenHook{}

	AddRecoveryTokenHook(boil.BeforeUpdateHook, recoveryTokenBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	recoveryTokenBeforeUpdateHooks = []RecoveryTokenHook{}

	AddRecoveryTokenHook(boil.AfterUpdateHook, recoveryTokenAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	recoveryTokenAfterUpdateHooks = []RecoveryTokenHook{}

	AddRecoveryTokenHook(boil.BeforeDeleteHook, recoveryTokenBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	recoveryTokenBeforeDeleteHooks = []RecoveryTokenHook{}

	AddRecoveryTokenHook(boil.AfterDeleteHook, recoveryTokenAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	recoveryTokenAfterDeleteHooks = []RecoveryTokenHook{}

	AddRecoveryTokenHook(boil.BeforeUpsertHook, recoveryTokenBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	recoveryTokenBeforeUpsertHooks = []RecoveryTokenHook{}

	AddRecoveryTokenHook(boil.AfterUpsertHook, recoveryTokenAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	recoveryTokenAfterUpsertHooks = []RecoveryTokenHook{}
}

func testRecoveryTokensInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecoveryToken{}
	if err = randomize.Struct(seed, o, recoveryTokenDBTypes, true, recoveryTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecoveryTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecoveryTokensInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecoveryToken{}
	if err = randomize.Struct(seed, o, recoveryTokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(recoveryTokenColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RecoveryTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecoveryTokenToOneUserUsingIDUserUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RecoveryToken
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recoveryTokenDBTypes, false, recoveryTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDUser = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDUserUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := RecoveryTokenSlice{&local}
	if err = local.L.LoadIDUserUser(ctx, tx, false, (*[]*RecoveryToken)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDUserUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDUserUser = nil
	if err = local.L.LoadIDUserUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDUserUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testRecoveryTokenToOneSetOpUserUsingIDUserUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecoveryToken
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recoveryTokenDBTypes, false, strmangle.SetComplement(recoveryTokenPrimaryKeyColumns, recoveryTokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetIDUserUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDUserUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDUserRecoveryTokens[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDUser != x.ID {
			t.Error("foreign key was wrong value", a.IDUser)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDUser))
		reflect.Indirect(reflect.ValueOf(&a.IDUser)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDUser != x.ID {
			t.Error("foreign key was wrong value", a.IDUser, x.ID)
		}
	}
}

func testRecoveryTokensReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecoveryToken{}
	if err = randomize.Struct(seed, o, recoveryTokenDBTypes, true, recoveryTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecoveryTokensReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecoveryToken{}
	if err = randomize.Struct(seed, o, recoveryTokenDBTypes, true, recoveryTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecoveryTokenSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecoveryTokensSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecoveryToken{}
	if err = randomize.Struct(seed, o, recoveryTokenDBTypes, true, recoveryTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecoveryTokens().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	recoveryTokenDBTypes = map[string]string{`ID`: `bigint`, `Token`: `text`, `IDUser`: `bigint`, `IsUsed`: `boolean`, `CreatedAt`: `timestamp without time zone`, `ExpiresAt`: `timestamp without time zone`}
	_                    = bytes.MinRead
)

func testRecoveryTokensUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(recoveryTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(recoveryTokenAllColumns) == len(recoveryTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecoveryToken{}
	if err = randomize.Struct(seed, o, recoveryTokenDBTypes, true, recoveryTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecoveryTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recoveryTokenDBTypes, true, recoveryTokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRecoveryTokensSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(recoveryTokenAllColumns) == len(recoveryTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecoveryToken{}
	if err = randomize.Struct(seed, o, recoveryTokenDBTypes, true, recoveryTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecoveryTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recoveryTokenDBTypes, true, recoveryTokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(recoveryTokenAllColumns, recoveryTokenPrimaryKeyColumns) {
		fields = recoveryTokenAllColumns
	} else {
		fields = strmangle.SetComplement(
			recoveryTokenAllColumns,
			recoveryTokenPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RecoveryTokenSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRecoveryTokensUpsert(t *testing.T) {
	t.Parallel()

	if len(recoveryTokenAllColumns) == len(recoveryTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RecoveryToken{}
	if err = randomize.Struct(seed, &o, recoveryTokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecoveryToken: %s", err)
	}

	count, err := RecoveryTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, recoveryTokenDBTypes, false, recoveryTokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecoveryToken struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecoveryToken: %s", err)
	}

	count, err = RecoveryTokens().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
