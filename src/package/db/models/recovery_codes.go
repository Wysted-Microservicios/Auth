// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RecoveryCode is an object representing the database table.
type RecoveryCode struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Code      string    `boil:"code" json:"code" toml:"code" yaml:"code"`
	IDUser    int64     `boil:"id_user" json:"id_user" toml:"id_user" yaml:"id_user"`
	IsActive  bool      `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	ExpiresAt time.Time `boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *recoveryCodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L recoveryCodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecoveryCodeColumns = struct {
	ID        string
	Code      string
	IDUser    string
	IsActive  string
	ExpiresAt string
	CreatedAt string
}{
	ID:        "id",
	Code:      "code",
	IDUser:    "id_user",
	IsActive:  "is_active",
	ExpiresAt: "expires_at",
	CreatedAt: "created_at",
}

var RecoveryCodeTableColumns = struct {
	ID        string
	Code      string
	IDUser    string
	IsActive  string
	ExpiresAt string
	CreatedAt string
}{
	ID:        "recovery_codes.id",
	Code:      "recovery_codes.code",
	IDUser:    "recovery_codes.id_user",
	IsActive:  "recovery_codes.is_active",
	ExpiresAt: "recovery_codes.expires_at",
	CreatedAt: "recovery_codes.created_at",
}

// Generated where

var RecoveryCodeWhere = struct {
	ID        whereHelperint64
	Code      whereHelperstring
	IDUser    whereHelperint64
	IsActive  whereHelperbool
	ExpiresAt whereHelpertime_Time
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"recovery_codes\".\"id\""},
	Code:      whereHelperstring{field: "\"recovery_codes\".\"code\""},
	IDUser:    whereHelperint64{field: "\"recovery_codes\".\"id_user\""},
	IsActive:  whereHelperbool{field: "\"recovery_codes\".\"is_active\""},
	ExpiresAt: whereHelpertime_Time{field: "\"recovery_codes\".\"expires_at\""},
	CreatedAt: whereHelpertime_Time{field: "\"recovery_codes\".\"created_at\""},
}

// RecoveryCodeRels is where relationship names are stored.
var RecoveryCodeRels = struct {
	IDUserUser string
}{
	IDUserUser: "IDUserUser",
}

// recoveryCodeR is where relationships are stored.
type recoveryCodeR struct {
	IDUserUser *User `boil:"IDUserUser" json:"IDUserUser" toml:"IDUserUser" yaml:"IDUserUser"`
}

// NewStruct creates a new relationship struct
func (*recoveryCodeR) NewStruct() *recoveryCodeR {
	return &recoveryCodeR{}
}

func (r *recoveryCodeR) GetIDUserUser() *User {
	if r == nil {
		return nil
	}
	return r.IDUserUser
}

// recoveryCodeL is where Load methods for each relationship are stored.
type recoveryCodeL struct{}

var (
	recoveryCodeAllColumns            = []string{"id", "code", "id_user", "is_active", "expires_at", "created_at"}
	recoveryCodeColumnsWithoutDefault = []string{"code", "id_user", "expires_at"}
	recoveryCodeColumnsWithDefault    = []string{"id", "is_active", "created_at"}
	recoveryCodePrimaryKeyColumns     = []string{"id"}
	recoveryCodeGeneratedColumns      = []string{}
)

type (
	// RecoveryCodeSlice is an alias for a slice of pointers to RecoveryCode.
	// This should almost always be used instead of []RecoveryCode.
	RecoveryCodeSlice []*RecoveryCode
	// RecoveryCodeHook is the signature for custom RecoveryCode hook methods
	RecoveryCodeHook func(context.Context, boil.ContextExecutor, *RecoveryCode) error

	recoveryCodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recoveryCodeType                 = reflect.TypeOf(&RecoveryCode{})
	recoveryCodeMapping              = queries.MakeStructMapping(recoveryCodeType)
	recoveryCodePrimaryKeyMapping, _ = queries.BindMapping(recoveryCodeType, recoveryCodeMapping, recoveryCodePrimaryKeyColumns)
	recoveryCodeInsertCacheMut       sync.RWMutex
	recoveryCodeInsertCache          = make(map[string]insertCache)
	recoveryCodeUpdateCacheMut       sync.RWMutex
	recoveryCodeUpdateCache          = make(map[string]updateCache)
	recoveryCodeUpsertCacheMut       sync.RWMutex
	recoveryCodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recoveryCodeAfterSelectMu sync.Mutex
var recoveryCodeAfterSelectHooks []RecoveryCodeHook

var recoveryCodeBeforeInsertMu sync.Mutex
var recoveryCodeBeforeInsertHooks []RecoveryCodeHook
var recoveryCodeAfterInsertMu sync.Mutex
var recoveryCodeAfterInsertHooks []RecoveryCodeHook

var recoveryCodeBeforeUpdateMu sync.Mutex
var recoveryCodeBeforeUpdateHooks []RecoveryCodeHook
var recoveryCodeAfterUpdateMu sync.Mutex
var recoveryCodeAfterUpdateHooks []RecoveryCodeHook

var recoveryCodeBeforeDeleteMu sync.Mutex
var recoveryCodeBeforeDeleteHooks []RecoveryCodeHook
var recoveryCodeAfterDeleteMu sync.Mutex
var recoveryCodeAfterDeleteHooks []RecoveryCodeHook

var recoveryCodeBeforeUpsertMu sync.Mutex
var recoveryCodeBeforeUpsertHooks []RecoveryCodeHook
var recoveryCodeAfterUpsertMu sync.Mutex
var recoveryCodeAfterUpsertHooks []RecoveryCodeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RecoveryCode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recoveryCodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RecoveryCode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recoveryCodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RecoveryCode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recoveryCodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RecoveryCode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recoveryCodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RecoveryCode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recoveryCodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RecoveryCode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recoveryCodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RecoveryCode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recoveryCodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RecoveryCode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recoveryCodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RecoveryCode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recoveryCodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecoveryCodeHook registers your hook function for all future operations.
func AddRecoveryCodeHook(hookPoint boil.HookPoint, recoveryCodeHook RecoveryCodeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		recoveryCodeAfterSelectMu.Lock()
		recoveryCodeAfterSelectHooks = append(recoveryCodeAfterSelectHooks, recoveryCodeHook)
		recoveryCodeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		recoveryCodeBeforeInsertMu.Lock()
		recoveryCodeBeforeInsertHooks = append(recoveryCodeBeforeInsertHooks, recoveryCodeHook)
		recoveryCodeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		recoveryCodeAfterInsertMu.Lock()
		recoveryCodeAfterInsertHooks = append(recoveryCodeAfterInsertHooks, recoveryCodeHook)
		recoveryCodeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		recoveryCodeBeforeUpdateMu.Lock()
		recoveryCodeBeforeUpdateHooks = append(recoveryCodeBeforeUpdateHooks, recoveryCodeHook)
		recoveryCodeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		recoveryCodeAfterUpdateMu.Lock()
		recoveryCodeAfterUpdateHooks = append(recoveryCodeAfterUpdateHooks, recoveryCodeHook)
		recoveryCodeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		recoveryCodeBeforeDeleteMu.Lock()
		recoveryCodeBeforeDeleteHooks = append(recoveryCodeBeforeDeleteHooks, recoveryCodeHook)
		recoveryCodeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		recoveryCodeAfterDeleteMu.Lock()
		recoveryCodeAfterDeleteHooks = append(recoveryCodeAfterDeleteHooks, recoveryCodeHook)
		recoveryCodeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		recoveryCodeBeforeUpsertMu.Lock()
		recoveryCodeBeforeUpsertHooks = append(recoveryCodeBeforeUpsertHooks, recoveryCodeHook)
		recoveryCodeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		recoveryCodeAfterUpsertMu.Lock()
		recoveryCodeAfterUpsertHooks = append(recoveryCodeAfterUpsertHooks, recoveryCodeHook)
		recoveryCodeAfterUpsertMu.Unlock()
	}
}

// One returns a single recoveryCode record from the query.
func (q recoveryCodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RecoveryCode, error) {
	o := &RecoveryCode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for recovery_codes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RecoveryCode records from the query.
func (q recoveryCodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecoveryCodeSlice, error) {
	var o []*RecoveryCode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RecoveryCode slice")
	}

	if len(recoveryCodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RecoveryCode records in the query.
func (q recoveryCodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count recovery_codes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q recoveryCodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if recovery_codes exists")
	}

	return count > 0, nil
}

// IDUserUser pointed to by the foreign key.
func (o *RecoveryCode) IDUserUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDUser),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadIDUserUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recoveryCodeL) LoadIDUserUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecoveryCode interface{}, mods queries.Applicator) error {
	var slice []*RecoveryCode
	var object *RecoveryCode

	if singular {
		var ok bool
		object, ok = maybeRecoveryCode.(*RecoveryCode)
		if !ok {
			object = new(RecoveryCode)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRecoveryCode)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRecoveryCode))
			}
		}
	} else {
		s, ok := maybeRecoveryCode.(*[]*RecoveryCode)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRecoveryCode)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRecoveryCode))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &recoveryCodeR{}
		}
		args[object.IDUser] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recoveryCodeR{}
			}

			args[obj.IDUser] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDUserUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.IDUserRecoveryCodes = append(foreign.R.IDUserRecoveryCodes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDUser == foreign.ID {
				local.R.IDUserUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.IDUserRecoveryCodes = append(foreign.R.IDUserRecoveryCodes, local)
				break
			}
		}
	}

	return nil
}

// SetIDUserUser of the recoveryCode to the related item.
// Sets o.R.IDUserUser to related.
// Adds o to related.R.IDUserRecoveryCodes.
func (o *RecoveryCode) SetIDUserUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recovery_codes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
		strmangle.WhereClause("\"", "\"", 2, recoveryCodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDUser = related.ID
	if o.R == nil {
		o.R = &recoveryCodeR{
			IDUserUser: related,
		}
	} else {
		o.R.IDUserUser = related
	}

	if related.R == nil {
		related.R = &userR{
			IDUserRecoveryCodes: RecoveryCodeSlice{o},
		}
	} else {
		related.R.IDUserRecoveryCodes = append(related.R.IDUserRecoveryCodes, o)
	}

	return nil
}

// RecoveryCodes retrieves all the records using an executor.
func RecoveryCodes(mods ...qm.QueryMod) recoveryCodeQuery {
	mods = append(mods, qm.From("\"recovery_codes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"recovery_codes\".*"})
	}

	return recoveryCodeQuery{q}
}

// FindRecoveryCode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecoveryCode(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*RecoveryCode, error) {
	recoveryCodeObj := &RecoveryCode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"recovery_codes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, recoveryCodeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from recovery_codes")
	}

	if err = recoveryCodeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return recoveryCodeObj, err
	}

	return recoveryCodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RecoveryCode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recovery_codes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recoveryCodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recoveryCodeInsertCacheMut.RLock()
	cache, cached := recoveryCodeInsertCache[key]
	recoveryCodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recoveryCodeAllColumns,
			recoveryCodeColumnsWithDefault,
			recoveryCodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recoveryCodeType, recoveryCodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recoveryCodeType, recoveryCodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"recovery_codes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"recovery_codes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into recovery_codes")
	}

	if !cached {
		recoveryCodeInsertCacheMut.Lock()
		recoveryCodeInsertCache[key] = cache
		recoveryCodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RecoveryCode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RecoveryCode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recoveryCodeUpdateCacheMut.RLock()
	cache, cached := recoveryCodeUpdateCache[key]
	recoveryCodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recoveryCodeAllColumns,
			recoveryCodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update recovery_codes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"recovery_codes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, recoveryCodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recoveryCodeType, recoveryCodeMapping, append(wl, recoveryCodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update recovery_codes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for recovery_codes")
	}

	if !cached {
		recoveryCodeUpdateCacheMut.Lock()
		recoveryCodeUpdateCache[key] = cache
		recoveryCodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q recoveryCodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for recovery_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for recovery_codes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecoveryCodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recoveryCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"recovery_codes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, recoveryCodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in recoveryCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all recoveryCode")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RecoveryCode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no recovery_codes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recoveryCodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recoveryCodeUpsertCacheMut.RLock()
	cache, cached := recoveryCodeUpsertCache[key]
	recoveryCodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			recoveryCodeAllColumns,
			recoveryCodeColumnsWithDefault,
			recoveryCodeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			recoveryCodeAllColumns,
			recoveryCodePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert recovery_codes, could not build update column list")
		}

		ret := strmangle.SetComplement(recoveryCodeAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(recoveryCodePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert recovery_codes, could not build conflict column list")
			}

			conflict = make([]string, len(recoveryCodePrimaryKeyColumns))
			copy(conflict, recoveryCodePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"recovery_codes\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(recoveryCodeType, recoveryCodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recoveryCodeType, recoveryCodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert recovery_codes")
	}

	if !cached {
		recoveryCodeUpsertCacheMut.Lock()
		recoveryCodeUpsertCache[key] = cache
		recoveryCodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RecoveryCode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RecoveryCode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RecoveryCode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recoveryCodePrimaryKeyMapping)
	sql := "DELETE FROM \"recovery_codes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from recovery_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for recovery_codes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q recoveryCodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no recoveryCodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recovery_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recovery_codes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecoveryCodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recoveryCodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recoveryCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"recovery_codes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recoveryCodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recoveryCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recovery_codes")
	}

	if len(recoveryCodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RecoveryCode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecoveryCode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecoveryCodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecoveryCodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recoveryCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"recovery_codes\".* FROM \"recovery_codes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recoveryCodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RecoveryCodeSlice")
	}

	*o = slice

	return nil
}

// RecoveryCodeExists checks if the RecoveryCode row exists.
func RecoveryCodeExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"recovery_codes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if recovery_codes exists")
	}

	return exists, nil
}

// Exists checks if the RecoveryCode row exists.
func (o *RecoveryCode) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RecoveryCodeExists(ctx, exec, o.ID)
}
