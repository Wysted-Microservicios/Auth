// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth/login": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Loggearse dentro de la aplicación de NeoHome",
                "parameters": [
                    {
                        "description": "Password y username",
                        "name": "authDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AuthDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.LoginResponse"
                        }
                    },
                    "403": {
                        "description": "Credenciales inválidas",
                        "schema": {
                            "$ref": "#/definitions/utils.ProblemDetails"
                        }
                    },
                    "409": {
                        "description": "La sesión no existe. Probablemente porque la eliminaron",
                        "schema": {
                            "$ref": "#/definitions/utils.ProblemDetails"
                        }
                    },
                    "503": {
                        "description": "Error con la base de datos",
                        "schema": {
                            "$ref": "#/definitions/utils.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/api/auth/refresh": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Refrescar sesión",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token de refresco, es decir, de sesión",
                        "name": "X-Refresh",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "No es un token válido JWT",
                        "schema": {
                            "$ref": "#/definitions/utils.ProblemDetails"
                        }
                    },
                    "403": {
                        "description": "No está el token de refresco en el header X-Refresh",
                        "schema": {
                            "$ref": "#/definitions/utils.ProblemDetails"
                        }
                    },
                    "404": {
                        "description": "El token no tiene un usuario registrado en la BD",
                        "schema": {
                            "$ref": "#/definitions/utils.ProblemDetails"
                        }
                    },
                    "409": {
                        "description": "La sesión no existe. Probablemente porque la eliminaron",
                        "schema": {
                            "$ref": "#/definitions/utils.ProblemDetails"
                        }
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Registrase",
                "parameters": [
                    {
                        "description": "name, username, email, password, role",
                        "name": "authDto",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.LoginResponse"
                        }
                    },
                    "403": {
                        "description": "Credenciales inválidas",
                        "schema": {
                            "$ref": "#/definitions/utils.ProblemDetails"
                        }
                    },
                    "409": {
                        "description": "La sesión no existe. Probablemente porque la eliminaron",
                        "schema": {
                            "$ref": "#/definitions/utils.ProblemDetails"
                        }
                    },
                    "503": {
                        "description": "Error con la base de datos",
                        "schema": {
                            "$ref": "#/definitions/utils.ProblemDetails"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.LoginResponse": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                },
                "refreshToken": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                },
                "user": {
                    "$ref": "#/definitions/model.User"
                }
            }
        },
        "dto.AuthDto": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.RegisterDto": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "role",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "maxLength": 100
                }
            }
        },
        "model.Role": {
            "type": "string",
            "enum": [
                "user",
                "admin"
            ],
            "x-enum-varnames": [
                "USER_ROLE",
                "ADMIN_ROLE"
            ]
        },
        "model.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Role"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "utils.ErrorProblemDetails": {
            "type": "object",
            "properties": {
                "param": {
                    "type": "string",
                    "example": "3"
                },
                "pointer": {
                    "type": "string",
                    "example": "max"
                },
                "title": {
                    "type": "string",
                    "example": "name"
                }
            }
        },
        "utils.ProblemDetails": {
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "detail": {
                    "type": "string",
                    "example": "Detalle técnico del error"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/utils.ErrorProblemDetails"
                    }
                },
                "title": {
                    "type": "string",
                    "example": "Descripción del problema para mostrar al usuario"
                },
                "type": {
                    "type": "string",
                    "example": "/docs/errors/errorPointer"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "BearerJWTToken in Authorization Header",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{"http", "https"},
	Title:            "API",
	Description:      "API Server",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
